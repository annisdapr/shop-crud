services:
  # Layanan untuk Database PostgreSQL (Tidak Perlu Diubah)
  db:
    image: postgres:14-alpine
    container_name: shop_db
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - ./.postgres-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d shop_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- LAYANAN APLIKASI YANG SUDAH DIPERBAIKI ---

  user-service:
    build:
      # DIUBAH: Context sekarang menunjuk langsung ke folder layanan.
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user_service_app
    restart: always
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy

  item-service:
    build:
      # DIUBAH: Context sekarang menunjuk langsung ke folder layanan.
      context: .
      dockerfile: item-service/Dockerfile
    container_name: item_service_app
    restart: always
    ports:
      - "${ITEM_SERVICE_PORT}:${ITEM_SERVICE_PORT}"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy

  purchase-service:
    build:
      context: .
      dockerfile: purchase-service/Dockerfile
    container_name: purchase_service_app
    restart: always
    ports:
      - "${PURCHASE_SERVICE_PORT}:${PURCHASE_SERVICE_PORT}"
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      # Kita bisa tambahkan dependensi ke layanan lain jika perlu
      item-service:
        condition: service_started

  # # OpenObserve service (tidak perlu diubah)
  # openobserve:
  #   image: openobserve/openobserve:latest
  #   restart: unless-stopped
  #   ports:
  #     - "5080:5080"  # UI
  #     - "4318:4318"  # OTLP HTTP
  #     - "4317:4317"  # OTLP gRPC
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./openobserve_data:/data